scalar Date

# schema.graphql
type User {
  id: ID!
  email: String!
  name: String!
  password: String!
  role: Role!
  Bookings: [Bookings]
  Feedbacks: [Feedbacks]
  isVerified: Boolean
}

type Feedbacks {
  id: Int! 
  message: String!
  user: User   
  userId: Int!
  bookingId: Int!
  Booking: Bookings
}

type Bookings {
  id: Int!
  location: String!
  bookingDateTime: Date!
  bookingHours: String!
  registrationNo: String!
  selectedSlotNo: String!
  status: BookingStatus!
  user: User
  userId: Int!
  Feedbacks: [Feedbacks]         
}

type Token {
  id:      Int  
  userId:  Int
  token:   String 
  createdAt:  Date
}


type Query {
  getAllUsers: [User]
  loginUser(email: String, password: String): User!
  getAllBookings: [Bookings]
  getBookingById(id: Int!): Bookings!
  getBookingsByUserId(userId: Int!): [Bookings]
  getFeedbacksByUserId(userId: Int!): [Feedbacks]
  getFeedbacksByBookingId(bookingId: Int!): [Feedbacks]
  getAllFeedbacks: [Feedbacks]
}

type Mutation {
  addUser(email: String!, name: String, password: String): User
  changePassword(id: Int!, currentPassword: String!, newPassword: String!): User
  deleteUser(id: Int!): [User]
  verifyOtp(token: String!, email: String!): User
  resendOtp(email: String!): User
  addBooking(location: String!, bookingDateTime: Date!, bookingHours: String!, registrationNo: String!, selectedSlotNo: String!,   userId: Int!): Bookings
  userCancelBooking(userId: Int!, bookingId: Int!): [Bookings]
  cancelBookingByAdmin(bookingId: Int!): [Bookings]
  approveBookingByAdmin(bookingId: Int!): [Bookings]
  addFeedbackByUser(userId: Int!, bookingId: Int!, message: String!): Feedbacks
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  CANCELED
}


