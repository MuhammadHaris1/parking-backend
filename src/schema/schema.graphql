scalar Date

# schema.graphql
type User {
  id: ID!
  email: String!
  name: String!
  password: String!
  role: Role!
  Bookings: [Bookings]
  Feedbacks: [Feedbacks]
  isVerified: Boolean
}

# type Post {
#   id: Int!      
#   category: String!
#   color:    String!  
#   location: String! 
#   foundDate: String!  
#   title:     String
#   description: String   
#   user:      User   
#   userId:    Int!                          
# }

type Feedbacks {
  id: Int! 
  message: String!
  user: User   
  userId: Int!  
}

type Bookings {
  id: Int!
  location: String!
  bookingDateTime: Date!
  bookingHours: String!
  registrationNo: String!
  selectedSlotNo: String!
  user: User
  userId: Int!          
}

type Token {
  id:      Int  
  userId:  Int
  token:   String 
  createdAt:  Date
}


type Query {
  getAllUsers: [User]
  # getAllPosts: [Post]
  loginUser(email: String, password: String): User!
}

type Mutation {
    addUser(email: String!, name: String, password: String): User
    changePassword(id: Int!, currentPassword: String!, newPassword: String!): User
    deleteUser(id: Int!): [User]
    # addPost(category: String!, color: String!, location: String!, foundDate: String!, title: String!, description: String!, userId: Int!): Post
    verifyOtp(token: String!, email: String!): User
    resendOtp(email: String!): User
}

enum Role {
  USER
  ADMIN
}


